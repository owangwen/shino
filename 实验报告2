题目：车厢调度问题实现
班级：电信1809
姓名：王文博
学号：U201813498
日期：2019.4.8

1.需求分析
 （1）.问题：假设停在铁路调度站入口处的车厢序列的编号依次为1,2,3，...，n。设计一个程序，求出所有
可能由此输出的长度为n 的车厢序列。
 （2）.输入int 型整数（较小一点）代表车厢数；
 （3）.输出可能的序列，int 类型，序列总数为Catalan数；
 （4）.完成车厢可能的序列；
 （5）.     a).输入1        输出1
                b).输入2       输出  21 
                                             12
                c).输入3         输出 321
                                              231
                                              213
                                              132
                                              123
                d).输入 4        输出  4321
                                               3421
                                               3241
                                               3214
                                               2431
                                               2341
                                               2314
                                               2143
                                               2134
                                               1432
                                               1342
                                               1324
                                               1243
                                               1234
2.概要设计
         首先创建一个栈，然后依次进栈，依次出栈，打印序列。
3.详细设计
见附录
Status InitStack(SqStack &S)
Status GetTop(SqStack S, SElemType& e)
Status Push(SqStack & S, SElemType e)
Status Pop(SqStack & S, SElemType & e)
void Move(SqStack temp, int In[], int Out[], int i, int j, int n)
4.调试分析
   1).时间复杂度分析  O(m*n^n)
   2).程序输入值超过10之后就跑不完了，序列过多；
   3).可以考虑加入total函数统计序列总数；
   4）结果可参见上表
#include<stdlib.h>
# include <stdio.h>
#define OK 1
#define ERROR 0
#define OVERFLOW -2
typedef int Status;

//SqStack
#define STACK_INIT_SIZE 100

typedef int SElemType;

typedef struct {
	SElemType* base;
	SElemType* top;
	int stacksize;
}SqStack;

Status InitStack(SqStack &S)
{
	S.base = (SElemType*)malloc(STACK_INIT_SIZE * sizeof(SElemType));
	if (!S.base)
		exit(OVERFLOW);
	S.top = S.base;
	S.stacksize = STACK_INIT_SIZE;
}

Status GetTop(SqStack S, SElemType& e)
{
	if (S.top == S.base)
		return ERROR;
	e = *(S.top - 1);
	return OK;
}

Status Push(SqStack & S, SElemType e)
{
	if (S.top - S.base >= S.stacksize)
	{
		S.base = (SElemType*)realloc(S.base, (S.stacksize + STACKINCREMENT) * sizeof(SElemType));
		if (!S.base)
			exit(OVERFLOW);
		S.top = S.base + S.stacksize;
		S.stacksize += STACKINCREMENT;
	}
	*S.top++ = e;
	return OK;
}

Status Pop(SqStack & S, SElemType & e)
{
	if (S.top == S.base)
		return ERROR;
	e = *--S.top;
	return OK;
}

Status PrintArray(int* s, int n)
{
	for (int i = 0; i < n; i++)
		printf("%5d", s[i]);
	printf("\n");
	return OK;
}

void Move(SqStack temp, int In[], int Out[], int i, int j, int n)
{
	SElemType e;
	if (i < n)					
	{
		Push(temp, In[i]);
		Move(temp, In, Out, i + 1, j, n);
		Pop(temp, Out[j]);
	}
	if (GetTop(temp, e))		
	{
		Pop(temp, Out[j]);
		Move(temp, In, Out, i, j + 1, n);
		Push(temp, Out[j]);
	}
	if (j >= n && !GetTop(temp, e))
	{
		printf("\t\t  the result ");
		PrintArray(Out, n);
	}
}

#define N 5

int main()
{
	int In[N];
	int i;
	for (i = 0; i < N; i++)
		In[i] = i + 1;
	printf("\t\t");
	PrintArray(In, N);
	printf("\t\t\n\t\t\n\t\t\n\t\t\n\n\t\t\n\t\t\n\t\t\n\t\t\n");
	SqStack temp;
	InitStack(temp);
	int Out[N];
	Move(temp, In, Out, 0, 0, N);
	return 0;
}

